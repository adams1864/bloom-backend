# README

## Integration / Endpoints

This backend provides REST endpoints for products, bundles and orders.
I'll provide a Postman collection or OpenAPI if you need it. For local testing, set env vars from .env and run:

    npm install
    npm start

## API Endpoints (quick reference)

Base path: /api (confirmed in src/server.ts — routes are mounted under /api)

Products
- GET  /api/products           — list products
- GET  /api/products/:id       — get product by id
- POST /api/products           — create product (JSON body)
- PUT  /api/products/:id       — update product
- DELETE /api/products/:id     — delete product

Bundles
- GET  /api/bundles
- GET  /api/bundles/:id
- POST /api/bundles
- PUT  /api/bundles/:id
- DELETE /api/bundles/:id

Orders
- GET  /api/orders
- GET  /api/orders/:id
- POST /api/orders
- PUT  /api/orders/:id
- DELETE /api/orders/:id

## Auth (exact, from src/auth/auth.routes.ts)

These routes are implemented in src/auth/auth.routes.ts and currently proxy to the Better Auth server-side API. If Better Auth is not available the endpoints return 502.

- POST /api/auth/login
  - Body: { "email": "...", "password": "..." }
  - Behavior: calls betterAuth.api.signInEmail(...) on the server; returns the Better Auth response on success, or 502 if Better Auth is unavailable.
  - Example:
    curl -X POST http://localhost:4000/api/auth/login \
      -H "Content-Type: application/json" \
      -d '{"email":"user@example.com","password":"secret"}'

- POST /api/auth/register
  - Body: { "email": "...", "password": "..." }
  - Behavior: calls betterAuth.api.signUpEmail(...); returns 201 on success or 502 if unavailable.
  - Example:
    curl -X POST http://localhost:4000/api/auth/register \
      -H "Content-Type: application/json" \
      -d '{"email":"user@example.com","password":"secret"}'

Note:
- No /auth/logout, /auth/me, or /auth/refresh routes are present.
- Auth endpoints are mounted at /api/auth and server listens on port 4000 (see src/server.ts).

Example requests

- List products
  curl -sS http://localhost:4000/api/products

- Create product (requires JSON body)
  curl -X POST http://localhost:4000/api/products \
    -H "Content-Type: application/json" \
    -d '{"name":"Example","price":9.99,"stock":10}'

- Create order (example)
  curl -X POST http://localhost:4000/api/orders \
    -H "Content-Type: application/json" \
    -d '{"customerId":123,"items":[{"productId":1,"qty":2}]}'

Typical success response (example)
{
  "ok": true,
  "data": { /* resource */ }
}

Errors commonly return
{
  "ok": false,
  "error": "message"
}

Running locally

1. Install
   npm install

2. Populate .env (copy from .env.example if present). Common env vars used by this project:
   - PORT (default 3000)
   - DATABASE_URL (or similar, check drizzle.config.ts / src/db)
   - JWT_SECRET or SESSION_SECRET (check src/auth)
   - UPLOADS_DIR (if using uploads/)

3. Run migrations
   - This project uses Drizzle (see drizzle.config.ts and /drizzle folder).
   - Use the existing scripts in /scripts or your normal drizzle-kit workflow.
   - Example (adjust for your environment):
     npx drizzle-kit push --config ./drizzle.config.ts

4. Start
   npm run dev
   or
   npm start

Testing
- There's a basic test folder at src/__tests__ — run:
  npm test

Postman / OpenAPI
- I can generate a Postman collection or OpenAPI (Swagger) spec if you want a consumable contract for frontend integration. Tell me which and I will add it.

Notes & next steps
- Confirm whether you want a deployed URL (hosted endpoints) or only the endpoint list / Postman/OpenAPI to integrate locally.
- If you want deployment, tell me provider preference (Railway, Render, Heroku, Vercel with serverless, or a Docker image) and I’ll detail required secrets/DB access.

Contact
- Check src/server.ts and src/auth/* for exact route mounting and auth requirements before integration.

Updated: 2025-10-23